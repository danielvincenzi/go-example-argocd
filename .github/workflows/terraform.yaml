name: Terraform

on:
  push:
    paths:
      - ".github/**"
      - "terraform/**"
  pull_request:
    branches:
      - main
    paths:
      - ".github/**"
      - "terraform/**"

defaults:
  run:
    working-directory: ./terraform

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.0
          cli_config_credentials_token: ${{ secrets.TERRAFORM_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve

# jobs:
#   terraform_plan:
#     name: Terraform plan
#     runs-on: ubuntu-latest
#     if: github.event_name == 'push' || github.event_name != 'pull_request'
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       - name: Get Terraform credentials
#         uses: hashicorp/setup-terraform@v1
#         with:
#           terraform_version: 1.1.0
#           cli_config_credentials_token: ${{ secrets.TERRAFORM_API_TOKEN }}

#       - name: Terraform plan
#         # continue-on-error: true
#         run: |
#           set -o errexit
#           terraform fmt -recursive -check -diff
#           terraform init -no-color
#           terraform get
#           terraform validate -no-color
#           # terraform plan -out "tf_plan" -input=false
#           terraform plan -input=false

#       # - name: Upload Terraform plan
#       #   uses: actions/upload-artifact@v2
#       #   with:
#       #     name: tf_plan
#       #     path: terraform/tf_plan
#       #     if-no-files-found: error
#       #     retention-days: 1

#       # - name: Update pull request
#       #   uses: actions/github-script@0.9.0
#       #   if: github.event_name == 'pull_request'
#       #   env:
#       #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#       #   with:
#       #     github-token: ${{ secrets.GITHUB_TOKEN }}
#       #     script: |
#       #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#       #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#       #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#       #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

#       #       <details><summary>Show Plan</summary>

#       #       \`\`\`\n
#       #       ${process.env.PLAN}
#       #       \`\`\`

#       #       </details>

#       #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

#       #       github.issues.createComment({
#       #         issue_number: context.issue.number,
#       #         owner: context.repo.owner,
#       #         repo: context.repo.repo,
#       #         body: output
#       #       })
  
#   terraform_apply:
#     name: 'Terraform apply'
#     runs-on: ubuntu-latest
#     needs: terraform_plan
#     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#     environment:
#       name: tf_apply

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       # - name: Download tf_plan
#       #   uses: actions/download-artifact@v2
#       #   with:
#       #     name: tf_plan
#       #     path: terraform

#       - name: Terraform apply
#         run: |
#           set -o errexit
#           terraform init -no-color
#           terraform get
#           terraform show
#           terraform apply -auto-approve -input=false

